**Функция "Запуск авторизационного окна"**
Описание: Инициализирует и запускает основное окно авторизации/регистрации.
Источник данных: Взаимодействие с пользователем.
Действия:
- Инициализирует окно SFML.
- Загружает шрифты, текстуры, звуки.
- Инициализирует все элементы пользовательского интерфейса (кнопки, текстовые поля).
- Запускает главный цикл обработки событий окна.
Формат вывода: Отображается окно авторизации.

**Функция "Обработка событий окна авторизации"**
Описание: Обрабатывает пользовательские события (нажатия кнопок, ввод текста, движение мыши) в окне авторизации.
Источник данных: События SFML (sf::Event).
Действия:
- Опрашивает события окна.
- В зависимости от текущего состояния окна (MAIN, LOGIN, REGISTER и т.д.) вызывает соответствующий обработчик событий.
Формат вывода: Изменение состояния окна или данных.

**Функция "Обработка событий главного окна"**
Описание: Реагирует на нажатия кнопок "Войти", "Регистрация", "Выход" в главном меню авторизации.
Источник данных: Позиция мыши, нажатия кнопок.
Действия:
- При нажатии на "Войти": переключает состояние на LOGIN, очищает поля ввода.
- При нажатии на "Регистрация": переключает состояние на REGISTER, очищает поля ввода.
- При нажатии на "Выход": закрывает окно.
Формат вывода: Переход на другой экран или закрытие приложения.

**Функция "Обработка событий окна входа"**
Описание: Обрабатывает ввод данных для логина и нажатия кнопок в окне входа.
Источник данных: Позиция мыши, ввод текста (sf::Event::TextEntered), нажатия клавиш (sf::Keyboard::Return).
Действия:
- Определяет активное текстовое поле (имя пользователя или пароль).
- Обрабатывает ввод символов и удаление (Backspace).
- При нажатии "Вход": вызывает функцию handleSubmit() для попытки входа.
- При нажатии "Назад": возвращает в главное окно.
- При нажатии "Показать пароль": вызывает togglePasswordVisibility().
Формат вывода: Изменение текста в полях ввода, смена состояния окна, отображение сообщений об ошибках.

**Функция "Обработка событий окна регистрации"**
Описание: Обрабатывает ввод данных для регистрации и нажатия кнопок в окне регистрации.
Источник данных: Позиция мыши, ввод текста (sf::Event::TextEntered), нажатия клавиш (sf::Keyboard::Return).
Действия:
- Аналогично обработке событий окна входа, но для регистрации.
- При нажатии "Регистрация": вызывает handleSubmit() для попытки регистрации.
Формат вывода: Изменение текста в полях ввода, смена состояния окна, отображение сообщений об ошибках.

**Функция "Отправка данных (логин/регистрация)"**
Описание: Выполняет попытку входа или регистрации пользователя на основе введенных данных.
Источник данных: `username`, `password` из полей ввода, `currentState`.
Действия:
- Если текущее состояние LOGIN:
  - Вызывает `User::loginUser(username, password)`.
  - При успехе: вызывает `enterMainMenu()`, очищает сообщение об ошибке.
  - При неудаче: отображает "Неверное имя пользователя или пароль".
- Если текущее состояние REGISTER:
  - Вызывает `User::registerUser(username, password)`.
  - При успехе: вызывает `enterMainMenu()`, очищает сообщение об ошибке.
  - При неудаче: отображает "Ошибка регистрации. Имя пользователя уже существует."
Формат вывода: Сообщение об ошибке или переход в главное меню.

**Функция "Переключить видимость пароля"**
Описание: Изменяет отображение пароля в текстовом поле между открытым текстом и символами маскировки.
Источник данных: `isPasswordVisible` (флаг состояния).
Действия:
- Инвертирует значение `isPasswordVisible`.
- Обновляет текст в поле `passwordInputText` соответствующим образом.
Формат вывода: Изменение отображения пароля.

**Функция "Войти в главное меню"**
Описание: Переводит приложение в состояние главного меню.
Источник данных: None.
Действия:
- Устанавливает `currentState` в `MAIN_MENU`.
- Обеспечивает корректное воспроизведение фоновой музыки при переходе в меню.
Формат вывода: Отображается главное меню.

**Функция "Обработка событий главного меню"**
Описание: Реагирует на нажатия кнопок в главном игровом меню.
Источник данных: Позиция мыши.
Действия:
- При нажатии "Играть": переключает состояние на `MAP_SELECTION`.
- При нажатии "Выбрать персонажа": переключает состояние на `CHARACTER_SELECT`.
- При нажатии "Настройки": переключает состояние на `SETTINGS`.
- При нажатии "Таблица лидеров": переключает состояние на `HIGHSCORES`.
- При нажатии "Выход": закрывает окно.
Формат вывода: Переход на другой экран или закрытие приложения.

**Функция "Обработка событий выбора карты"**
Описание: Обрабатывает выбор карты, сложности и запуск игры.
Источник данных: Позиция мыши.
Действия:
- При нажатии на кнопку выбора карты: циклически изменяет выбранную карту.
- При нажатии на кнопку выбора сложности: циклически изменяет сложность (Легкая, Средняя, Сложная).
- При нажатии "Начать игру":
  - Определяет выбранную сложность.
  - Закрывает текущее окно авторизации.
  - Создает новый объект `Game` с выбранной сложностью, картой и именем пользователя.
  - Запускает игровой процесс (`game.run()`).
- При нажатии "Вернуться в меню": возвращает в главное меню.
Формат вывода: Изменение текста кнопок, запуск игры или возврат в меню.

**Функция "Обработка событий выбора персонажа"**
Описание: Обрабатывает выбор игрового персонажа (красный, зеленый, синий куб).
Источник данных: Позиция мыши.
Действия:
- При нажатии на один из кубов: возвращает в главное меню.
Формат вывода: Переход в главное меню.

**Функция "Обработка событий настроек"**
Описание: Обрабатывает изменения громкости музыки/эффектов, переключение музыкальных треков и смену темы.
Источник данных: Позиция мыши (для слайдеров), нажатия кнопок.
Действия:
- При перетаскивании музыкального слайдера: изменяет `musicVolume` и устанавливает громкость текущего трека.
- При перетаскивании слайдера эффектов: изменяет `effectsVolume`.
- При нажатии "Предыдущий трек"/"Следующий трек": переключает текущий музыкальный трек, останавливает предыдущий, запускает новый.
- При нажатии "Тема": переключает между темной и светлой темой, меняет фоновую текстуру.
- При нажатии "Вернуться в меню": возвращает в главное меню.
Формат вывода: Изменение громкости, смена трека, изменение темы.

**Функция "Обработка событий таблицы лидеров"**
Описание: Обрабатывает нажатия кнопок в окне таблицы лидеров.
Источник данных: Позиция мыши.
Действия:
- При нажатии "Назад": возвращает в главное меню.
Формат вывода: Возврат в главное меню.

**Функция "Хешировать пароль" (User::hashPassword)**
Описание: Преобразует текстовый пароль в хешированную строку для безопасного хранения.
Источник данных: `password` (строка).
Действия:
- Добавляет "соль" (`SALT`) к паролю.
- Выполняет простое хеширование (умножает ASCII-код каждого символа на 31 и преобразует в строку).
Формат вывода: Хешированная строка.

**Функция "Сохранить данные пользователя" (User::saveUserData)**
Описание: Записывает логин и хешированный пароль нового пользователя в файл.
Источник данных: `username` (строка), `password` (хешированная строка), `users.txt`.
Действия:
- Открывает файл `users.txt` в режиме добавления.
- Записывает логин и хешированный пароль, разделенные двоеточием, в новую строку.
- Закрывает файл.
Формат вывода: Запись данных в файл.

**Функция "Загрузить данные пользователя" (User::loadUserData)**
Описание: Проверяет наличие пользователя в файле `users.txt` и совпадение хешированного пароля.
Источник данных: `username` (строка), `password` (хешированная строка), `users.txt`.
Действия:
- Открывает файл `users.txt` для чтения.
- Считывает каждую строку файла.
- Разделяет строку на логин и хешированный пароль.
- Сравнивает введенные данные с данными из файла.
Формат вывода: `true` (успех) или `false` (неудача).

**Функция "Зарегистрировать пользователя" (User::registerUser)**
Описание: Создает новый аккаунт пользователя, если логин не занят.
Источник данных: `username` (строка), `password` (строка).
Действия:
- Проверяет, не пустые ли логин и пароль.
- Проверяет, не существует ли уже пользователь с таким логином в `users.txt`.
- Если логин уникален, вызывает `saveUserData()` для сохранения данных.
Формат вывода: `true` (успех) или `false` (неудача), сообщение в консоли.

**Функция "Войти в систему" (User::loginUser)**
Описание: Осуществляет вход пользователя в систему.
Источник данных: `username` (строка), `password` (строка).
Действия:
- Вызывает `loadUserData()` для проверки учетных данных.
Формат вывода: `true` (успех) или `false` (неудача).

**Функция "Инициализация игры" (Game::Game)**
Описание: Конструктор класса `Game`, который подготавливает все необходимое для начала новой игры.
Источник данных: `difficulty` (сложность), `mapNumber` (номер карты), `username` (имя пользователя).
Действия:
- Инициализирует окно SFML в полноэкранном режиме.
- Загружает звуковые эффекты (ключ, дверь, финиш, урон).
- Загружает фоновую музыку.
- Устанавливает размеры лабиринта в зависимости от выбранной сложности.
- Инициализирует состояние игры (здоровье игрока, количество собранных ключей, флаги).
- Загружает шрифты и текстуры (пола, стен, дверей, ключей, ловушек) в зависимости от номера карты.
- Инициализирует элементы пользовательского интерфейса (полоса здоровья, таймер).
- Генерирует лабиринт (`loadMaze()`).
- Размещает ловушки (`placeTraps()`) и ключи (`placeKeys()`).
- Настраивает игрока и финишную точку.
- Настраивает камеру.
- Инициализирует меню паузы и окно "Игра окончена".
Формат вывода: Созданный и готовый к запуску игровой объект.

**Функция "Запуск игры" (Game::run)**
Описание: Содержит основной игровой цикл.
Источник данных: Взаимодействие с пользователем, состояние игры.
Действия:
- Пока окно игры открыто:
  - Обрабатывает события (`handleEvents()`).
  - Обновляет состояние игры (`update()`).
  - Отрисовывает все элементы игры (`render()`).
- Завершается при закрытии окна.
Формат вывода: Запущенный игровой процесс.

**Функция "Обработка событий игры" (Game::handleEvents)**
Описание: Обрабатывает пользовательский ввод и системные события во время игрового процесса.
Источник данных: События SFML (sf::Event).
Действия:
- Закрывает окно при событии `sf::Event::Closed`.
- В зависимости от состояния игры (пауза, игра окончена) вызывает соответствующий обработчик событий.
- Обрабатывает ввод игрока (движение, прыжок) через `player.handleInput()`.
Формат вывода: Изменение состояния игры или игрока.

**Функция "Обновить состояние игры" (Game::update)**
Описание: Обновляет все логические компоненты игры в каждом кадре.
Источник данных: Время, состояние игрока, ловушек, ключей, врагов.
Действия:
- Обновляет состояние игрока (`player.update()`).
- Обновляет положение камеры (`updateCamera()`).
- Проверяет столкновения игрока со стенами (`checkPlayerWallCollision()`).
- Проверяет столкновения игрока с ловушками (`handlePlayerTrapCollision()`).
- Проверяет столкновения игрока с ключами (`handlePlayerKeyCollision()`).
- Обновляет состояние врагов (если есть).
- Обновляет полосу здоровья (`updateHealthBar()`).
- Обновляет таймер (`updateTimer()`).
- Проверяет условие победы (`checkWinCondition()`).
- Применяет эффект вспышки при получении урона.
Формат вывода: Измененное игровое состояние.

**Функция "Отрисовка игрового мира" (Game::render)**
Описание: Отображает все игровые объекты на экране.
Источник данных: Состояние всех игровых объектов.
Действия:
- Очищает окно.
- Отрисовывает фон.
- Отрисовывает все стены лабиринта.
- Отрисовывает все ловушки.
- Отрисовывает все ключи.
- Отрисовывает дверь (открытую или закрытую).
- Отрисовывает игрока.
- Отрисовывает врагов.
- Отрисовывает финишную точку.
- Отрисовывает элементы HUD (полоса здоровья, таймер).
- Отрисовывает меню паузы или окно "Игра окончена", если активны.
- Отображает отрисованный кадр.
Формат вывода: Визуальное представление игрового мира.

**Функция "Загрузить лабиринт" (Game::loadMaze)**
Описание: Генерирует или загружает структуру лабиринта (стен).
Источник данных: `MAZE_WIDTH`, `MAZE_HEIGHT`, `CELL_SIZE`, `wallTexture`, `floorTexture`.
Действия:
- Инициализирует двумерный массив, представляющий лабиринт.
- Использует алгоритм для генерации лабиринта (например, DFS).
- Создает объекты `sf::RectangleShape` для каждой стены и `sf::Sprite` для пола.
- Сохраняет стены в векторе `walls`.
Формат вывода: Сформированный лабиринт.

**Функция "Разместить ловушки" (Game::placeTraps)**
Описание: Рандомно размещает ловушки по лабиринту.
Источник данных: `maze`, `trapTexture`, `gameDifficulty`.
Действия:
- Определяет количество ловушек и урон в зависимости от сложности.
- Ищет случайные свободные позиции в лабиринте.
- Создает объекты `Trap` и добавляет их в вектор `traps`.
- Устанавливает позицию ловушек.
Формат вывода: Ловушки, размещенные в игровом мире.

**Функция "Разместить ключи" (Game::placeKeys)**
Описание: Рандомно размещает ключи по лабиринту.
Источник данных: `maze`, `keyTexture`.
Действия:
- Ищет случайные свободные позиции в лабиринте.
- Создает объекты `Key` и добавляет их в вектор `keys`.
- Устанавливает позицию ключей.
Формат вывода: Ключи, размещенные в игровом мире.

**Функция "Обработка столкновений игрока со стенами" (Game::checkPlayerWallCollision)**
Описание: Предотвращает прохождение игрока сквозь стены.
Источник данных: Позиция и границы игрока, стены лабиринта.
Действия:
- Для каждой стены в лабиринте:
  - Проверяет, пересекаются ли границы игрока с границами стены.
  - Если есть пересечение, корректирует позицию игрока, чтобы он не проникал в стену.
Формат вывода: Измененная позиция игрока.

**Функция "Обработка столкновений игрока с ловушками" (Game::handlePlayerTrapCollision)**
Описание: Наносит урон игроку при столкновении с активной ловушкой.
Источник данных: Позиция и границы игрока, ловушки.
Действия:
- Для каждой ловушки:
  - Если ловушка активна и границы игрока пересекаются с границами ловушки:
    - Вызывает `player.takeDamage()` с уроном от ловушки.
    - Активирует эффект вспышки урона.
    - Может деактивировать ловушку (зависит от логики игры).
Формат вывода: Изменение здоровья игрока, активация визуальных эффектов.

**Функция "Обработка столкновений игрока с ключами" (Game::handlePlayerKeyCollision)**
Описание: Позволяет игроку собирать ключи.
Источник данных: Позиция и границы игрока, ключи.
Действия:
- Для каждого ключа:
  - Если ключ не собран и границы игрока пересекаются с границами ключа:
    - Вызывает `key.collect()`.
    - Увеличивает счетчик собранных ключей.
    - Воспроизводит звук сбора ключа.
Формат вывода: Увеличение количества собранных ключей, воспроизведение звука.

**Функция "Обновить камеру" (Game::updateCamera)**
Описание: Перемещает игровую камеру, чтобы она следила за игроком.
Источник данных: Позиция игрока, размеры окна.
Действия:
- Устанавливает центр камеры на позицию игрока.
- Ограничивает движение камеры пределами лабиринта, чтобы избежать отображения пустых областей.
Формат вывода: Измененное представление игрового мира.

**Функция "Обновить полосу здоровья" (Game::updateHealthBar)**
Описание: Обновляет визуальное отображение здоровья игрока.
Источник данных: `player.getHealth()`.
Действия:
- Изменяет ширину полосы здоровья в соответствии с текущим здоровьем игрока.
- Обновляет текстовое значение здоровья.
Формат вывода: Обновленная полоса здоровья и текст на экране.

**Функция "Обновить таймер" (Game::updateTimer)**
Описание: Обновляет игровой таймер.
Источник данных: Истекшее время.
Действия:
- Увеличивает значение таймера с течением времени.
- Обновляет текстовое отображение таймера на экране.
Формат вывода: Обновленное значение таймера на экране.

**Функция "Проверить условие победы" (Game::checkWinCondition)**
Описание: Определяет, достиг ли игрок конца лабиринта и собрал ли все ключи.
Источник данных: Позиция игрока, статус двери, количество собранных ключей.
Действия:
- Если игрок находится в пределах финишной точки и собраны все ключи:
  - Если дверь закрыта, открывает ее и воспроизводит звук.
- Если игрок проходит через открытую дверь:
  - Останавливает игровой таймер.
  - Сохраняет рекорд игрока (`Records::addRecord()`).
  - Переключает состояние на `GAME_OVER`.
  - Воспроизводит звук победы.
Формат вывода: Изменение состояния двери, сохранение рекорда, переход в окно "Игра окончена".

**Функция "Инициализировать меню паузы" (Game::initializePauseMenu)**
Описание: Создает и настраивает элементы пользовательского интерфейса для меню паузы.
Источник данных: None.
Действия:
- Создает фон, заголовок, кнопки ("Продолжить", "Перезапустить", "Главное меню", "Выход") и их текст.
- Устанавливает позиции и внешний вид этих элементов.
Формат вывода: Готовое к отображению меню паузы.

**Функция "Обработка событий меню паузы" (Game::handlePauseMenuEvents)**
Описание: Обрабатывает взаимодействие пользователя с меню паузы.
Источник данных: Позиция мыши, нажатия кнопок.
Действия:
- При нажатии "Продолжить": возобновляет игру.
- При нажатии "Перезапустить": перезапускает игру.
- При нажатии "Главное меню": возвращает в главное меню авторизации.
- При нажатии "Выход": закрывает окно игры.
Формат вывода: Возобновление игры, перезапуск, возврат в меню или выход.

**Функция "Инициализировать окно 'Игра окончена'" (Game::initializeGameOverWindow)**
Описание: Создает и настраивает элементы пользовательского интерфейса для окна "Игра окончена".
Источник данных: None.
Действия:
- Создает фон, заголовок, текст счета, кнопки ("Перезапустить", "Главное меню") и их текст.
- Устанавливает позиции и внешний вид этих элементов.
Формат вывода: Готовое к отображению окно "Игра окончена".

**Функция "Обработка событий окна 'Игра окончена'" (Game::handleGameOverEvents)**
Описание: Обрабатывает взаимодействие пользователя с окном "Игра окончена".
Источник данных: Позиция мыши, нажатия кнопок.
Действия:
- При нажатии "Перезапустить": перезапускает игру.
- При нажатии "Главное меню": возвращает в главное меню авторизации.
Формат вывода: Перезапуск игры или возврат в меню.

**Функция "Обновить игрока" (Player::update)**
Описание: Обновляет физическое состояние игрока (применение гравитации, трения).
Источник данных: `velocity`, `gravity`, `friction`.
Действия:
- Применяет силу гравитации к вертикальной скорости.
- Применяет трение к горизонтальной скорости.
- Перемещает спрайт игрока в соответствии с его скоростью.
- Проверяет столкновения со стенами (`checkWallCollisions()`).
Формат вывода: Измененная позиция и скорость игрока.

**Функция "Обработка ввода игрока" (Player::handleInput)**
Описание: Обрабатывает пользовательский ввод для управления игроком.
Источник данных: События SFML (sf::Event), состояние клавиатуры.
Действия:
- При нажатии пробела: инициирует прыжок, если игрок не в прыжке.
- При нажатии стрелки влево/вправо: устанавливает горизонтальную скорость для движения.
- Если стрелки не нажаты: сбрасывает флаг движения.
Формат вывода: Измененная скорость и состояние игрока.

**Функция "Нанести урон игроку" (Player::takeDamage)**
Описание: Уменьшает здоровье игрока и делает его временно неуязвимым.
Источник данных: `damage` (количество урона).
Действия:
- Если игрок не неуязвим:
  - Вычитает урон из здоровья.
  - Устанавливает флаг `isInvincible` в `true`.
  - Устанавливает время неуязвимости.
Формат вывода: Измененное здоровье игрока, активация неуязвимости.

**Функция "Восстановить здоровье игрока" (Player::heal)**
Описание: Увеличивает здоровье игрока до максимального значения.
Источник данных: `amount` (количество здоровья).
Действия:
- Увеличивает здоровье игрока.
- Ограничивает здоровье значением `maxHealth`.
Формат вывода: Измененное здоровье игрока.

**Функция "Проверить столкновения игрока со стенами" (Player::checkWallCollisions)**
Описание: Корректирует позицию игрока, если он столкнулся с границами экрана.
Источник данных: Глобальные границы игрока.
Действия:
- Проверяет, выходит ли игрок за левую/правую/верхнюю/нижнюю границы экрана.
- Если выходит, корректирует позицию и сбрасывает соответствующую скорость.
- При столкновении с нижней границей, сбрасывает флаг `isJumping`.
Формат вывода: Измененная позиция и скорость игрока.

**Функция "Обновить анимацию игрока" (Player::updateAnimation)**
Описание: Обновляет кадр анимации игрока, если он движется.
Источник данных: `isMoving`, `animationTime`, `currentFrame`.
Действия:
- Если игрок движется:
  - Увеличивает `animationTime`.
  - Если `animationTime` достигает порога, переключает `currentFrame` и обновляет `textureRect` спрайта.
- Если игрок не движется:
  - Сбрасывает `currentFrame` на первый кадр.
Формат вывода: Измененный спрайт игрока (анимация).

**Функция "Обновить ловушку" (Trap::update)**
Описание: Обновляет состояние ловушки (в текущей реализации ловушки статичны).
Источник данных: None.
Действия:
- Нет активных действий, ловушки статичны.
Формат вывода: Нет.

**Функция "Активировать ловушку" (Trap::activate)**
Описание: Устанавливает ловушку в активное состояние.
Источник данных: None.
Действия:
- Устанавливает `active` в `true`.
Формат вывода: Измененное состояние ловушки.

**Функция "Деактивировать ловушку" (Trap::deactivate)**
Описание: Устанавливает ловушку в неактивное состояние.
Источник данных: None.
Действия:
- Устанавливает `active` в `false`.
Формат вывода: Измененное состояние ловушки.

**Функция "Обновить ключ" (Key::update)**
Описание: Обновляет анимацию ключа.
Источник данных: `animationTime`, `initialPosition`.
Действия:
- Если ключ не собран:
  - Увеличивает `animationTime`.
  - Вычисляет смещение по оси Y для создания эффекта "плавания" с использованием `std::sin()`.
  - Устанавливает позицию спрайта ключа с учетом смещения.
Формат вывода: Измененная позиция ключа (анимация).

**Функция "Собрать ключ" (Key::collect)**
Описание: Помечает ключ как собранный.
Источник данных: None.
Действия:
- Устанавливает `collected` в `true`.
Формат вывода: Измененное состояние ключа.

**Функция "Обновить врага" (Enemy::update)**
Описание: Обновляет положение врага и его движение в сторону игрока.
Источник данных: `playerPosition` (позиция игрока), `shape.getPosition()`, `chaseRange`, `speed`.
Действия:
- Вычисляет вектор направления от врага к игроку.
- Вычисляет расстояние до игрока.
- Если игрок находится в пределах `chaseRange`:
  - Нормализует вектор направления.
  - Устанавливает `velocity` врага в направлении игрока с учетом скорости.
- Если игрок вне диапазона:
  - Устанавливает `velocity` врага в `(0,0)`.
- Перемещает спрайт врага в соответствии с его скоростью.
- Проверяет столкновения со стенами (`checkWallCollisions()`).
Формат вывода: Измененная позиция и скорость врага.

**Функция "Нанести урон врагу" (Enemy::takeDamage)**
Описание: Уменьшает здоровье врага.
Источник данных: `damage` (количество урона).
Действия:
- Вычитает урон из здоровья.
- Ограничивает здоровье до 0.
Формат вывода: Измененное здоровье врага.

**Функция "Добавить/обновить рекорд" (Records::addRecord)**
Описание: Добавляет новую запись о рекорде или обновляет существующую, если новое время лучше.
Источник данных: `username`, `score`, `difficulty`, `mapNumber`.
Действия:
- Ищет существующую запись для данного пользователя.
- Если запись найдена и новое `score` (время) меньше, обновляет запись.
- Если запись не найдена, добавляет новую.
- Сортирует записи по `score` (по возрастанию).
- Оставляет только топ-10 записей.
- Сохраняет изменения в файл (`saveToFile()`).
Формат вывода: Обновленная таблица рекордов.

**Функция "Получить рекорды" (Records::getRecords)**
Описание: Возвращает текущий список рекордов.
Источник данных: Внутренний вектор `records`.
Действия:
- Возвращает копию вектора `records`.
Формат вывода: `std::vector<Record>`.

**Функция "Сохранить в файл" (Records::saveToFile)**
Описание: Сохраняет текущую таблицу рекордов в текстовый файл.
Источник данных: Внутренний вектор `records`, `RECORDS_FILE`.
Действия:
- Открывает файл `records.txt` для записи.
- Для каждой записи в `records`:
  - Записывает `username`, `score`, `difficulty`, `mapNumber` в строку, разделенную запятыми, и добавляет перенос строки.
- Закрывает файл.
Формат вывода: Данные, записанные в файл.

**Функция "Загрузить из файла" (Records::loadFromFile)**
Описание: Загружает записи рекордов из текстового файла.
Источник данных: `RECORDS_FILE`.
Действия:
- Открывает файл `records.txt` для чтения.
- Очищает текущие записи в `records`.
- Считывает каждую строку файла.
- Разбирает строку на `username`, `score`, `difficulty`, `mapNumber`.
- Создает объекты `Record` и добавляет их в `records`.
Формат вывода: Обновленный внутренний список рекордов.

**Функция "Очистить рекорды" (Records::clearRecords)**
Описание: Удаляет все записи из таблицы рекордов.
Источник данных: None.
Действия:
- Очищает внутренний вектор `records`.
- Сохраняет пустую таблицу в файл (`saveToFile()`).
Формат вывода: Пустая таблица рекордов.

**Функция "Загрузить данные рекордов" (Records::loadRecords)**
Описание: Загружает записи о рекордах из файла `highscores.txt` в вектор `records` и сортирует их.
Источник данных: `highscores.txt`.
Действия:
- Очищает текущий вектор `records`.
- Открывает файл `highscores.txt` для чтения.
- Считывает каждую строку файла.
- Разделяет строку на логин и количество собранных ключей.
- Создает объект `Record` и добавляет его в вектор.
- Сортирует вектор `records` по убыванию количества ключей, а затем по возрастанию логина (для одинакового количества ключей).
- Закрывает файл.
Формат вывода: Заполненный и отсортированный вектор `records`.

**Функция "Сохранить новый рекорд" (Records::saveRecord)**
Описание: Добавляет новую запись о рекорде в файл `highscores.txt` и перезагружает рекорды.
Источник данных: `username` (строка), `keysCollected` (количество собранных ключей), `highscores.txt`.
Действия:
- Открывает файл `highscores.txt` в режиме добавления.
- Записывает логин и количество ключей, разделенные двоеточием, в новую строку.
- Закрывает файл.
- Вызывает `loadRecords()` для обновления списка рекордов.
Формат вывода: Запись данных в файл и обновленная таблица рекордов.







3.2.	Структура меню

         •	Экран авторизации/регистрации (начальный экран)
                  •	Авторизация
                           •	Ввод имени пользователя
                           •	Ввод пароля
                           •	Кнопка "Вход"
                           •	Кнопка "Показать/скрыть пароль"
                           •	Кнопка "Назад"
                           •	Сообщение об ошибке
                  •	Регистрация
                           •	Ввод имени пользователя
                           •	Ввод пароля
                           •	Кнопка "Регистрация"
                           •	Кнопка "Показать/скрыть пароль"
                           •	Кнопка "Назад"
                           •	Сообщение об ошибке
                  •	Главное меню авторизации
                           •	Кнопка "Войти"
                           •	Кнопка "Регистрация"
                           •	Кнопка "Выход"

         •	Главное меню игры (после успешной авторизации)
                  •	"Играть" (Переход к выбору карты/сложности)
                           •	Выбор карты
                                 •	Кнопка переключения карты (Карта 1, Карта 2, Карта 3)
                           •	Выбор сложности
                                 •	Кнопка переключения сложности (Легкая, Средняя, Сложная)
                           •	Кнопка "Начать игру"
                           •	Кнопка "Вернуться в меню"
                  •	"Выбрать персонажа"
                           •	Выбор цвета персонажа (Красный, Зеленый, Синий)
                           •	Возврат в главное меню
                  •	"Настройки"
                           •	"Громкость музыки" (слайдер)
                           •	"Громкость эффектов" (слайдер)
                           •	"Текущий трек" (кнопки "Вперед", "Назад")
                           •	"Цветовая тема" (кнопка "Тёмная"/"Светлая")
                           •	Кнопка "Вернуться в меню"
                  •	"Таблица лидеров"
                           •	Отображение лучших результатов
                           •	Кнопка "Назад"
                  •	"Выход" (из игры)

         •	Пауза (в игре)
                  •	Кнопка "Продолжить"
                  •	Кнопка "Перезапустить"
                  •	Кнопка "Главное меню"
                  •	Кнопка "Выход"

         •	Окно "Игра окончена"
                  •	Кнопка "Перезапустить"
                  •	Кнопка "Главное меню"




